package godata

import (
	"testing"
	"reflect"
)

/*	
	It is necessary to test:

	Type:
	- 0
	- min
	- max
	- rand(-max to max)

	Numbers:
	- 0
	- 1
	- 2
	- >2

	Negative:
	- all
	- part
	- no

	Doubles:
	- all
	- part
	- no

*/
var float64ListTests = [][]float64{
	[]float64{},
	[]float64{0.0},
	[]float64{0.0, 0.0},
	[]float64{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},

	[]float64{-4.940656458412465441765687928682213723651e-324},
	[]float64{4.940656458412465441765687928682213723651e-324},
	[]float64{-4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324},
	[]float64{-4.940656458412465441765687928682213723651e-324, -1.940656458412465441765687928682213723651e-324},
	[]float64{-4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324},
	[]float64{4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324},
	[]float64{4.940656458412465441765687928682213723651e-324, 1.940656458412465441765687928682213723651e-324},
	[]float64{-4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324, -4.940656458412465441765687928682213723651e-324},
	[]float64{4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324},

	[]float64{-1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, -1.497693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, -1.497693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.097693134862315708145274237317043567981e+308, -1.087693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, -1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308},
	[]float64{-1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.097693134862315708145274237317043567981e+308, -1.087693134862315708145274237317043567981e+308},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308, 1.087693134862315708145274237317043567981e+308},

	[]float64{-1.1},
	[]float64{19.12},
	[]float64{-1.1, -1.1},
	[]float64{-1.1, -19.251},
	[]float64{-1.1, 71.971},
	[]float64{61.1, 61.1},
	[]float64{61.1, 61082.0},
	[]float64{-100023.213, -100023.213, -100023.213, -100023.213, -100023.213, -100023.213, -100023.213, -100023.213, -100023.213},
	[]float64{-100.2, -100.2, -100.2, -100.2, -881325432.0, -0.00001, -0.00001, -9.0, -3.4},
	[]float64{-1.0, -32.631245, -992.15, -5.1, -0.012501, -3.17, -9999.1, -1.000001, -5.0},
	[]float64{100.1, 100.1, 100.1, -4.12, -6.0031, 54.31, 54.31, 76.152222, 0.0},
	[]float64{991.2, 23.6216, 7.16, 0.001247, -1.0, 37.1, 9.2, 41.8, 0.115123213},
	[]float64{100.53, 100.53, 100.53, 100.53, 100.53, 100.53, 100.53, 100.53, 100.53},
	[]float64{6.0, 12.7, 6.0, 1183.32, 83247.134587, 0.01, 0.01, 333.8, 983291839283.1},
	[]float64{235234236367647.0213123215, 0.01, 8442.2137, 0.0123123, 47657.231321452, 73.2125, 8.8888, 2.3, 65.2},
}

func TestFloat64List_Counter(t *testing.T) {
	expected := []map[float64]int{
		map[float64]int{}, 
		map[float64]int{0.0:1}, 
		map[float64]int{0.0:2}, 
		map[float64]int{0.0:9}, 

		map[float64]int{-4.940656458412465441765687928682213723651e-324:1}, 
		map[float64]int{4.940656458412465441765687928682213723651e-324:1}, 
		map[float64]int{-4.940656458412465441765687928682213723651e-324:2}, 
		map[float64]int{-4.940656458412465441765687928682213723651e-324:1, -1.940656458412465441765687928682213723651e-324:1}, 
		map[float64]int{-4.940656458412465441765687928682213723651e-324:1, 4.940656458412465441765687928682213723651e-324:1}, 
		map[float64]int{4.940656458412465441765687928682213723651e-324:2}, 
		map[float64]int{4.940656458412465441765687928682213723651e-324:1, 1.940656458412465441765687928682213723651e-324:1}, 
		map[float64]int{-4.940656458412465441765687928682213723651e-324:9}, 
		map[float64]int{4.940656458412465441765687928682213723651e-324:9}, 

		map[float64]int{-1.797693134862315708145274237317043567981e+308:2}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:1, -1.597693134862315708145274237317043567981e+308:1}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:1, 1.797693134862315708145274237317043567981e+308:1}, 
		map[float64]int{1.797693134862315708145274237317043567981e+308:2}, 
		map[float64]int{1.797693134862315708145274237317043567981e+308:1, 1.097693134862315708145274237317043567981e+308:1}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:9}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:3, -1.697693134862315708145274237317043567981e+308:2, -1.597693134862315708145274237317043567981e+308:1, -1.497693134862315708145274237317043567981e+308:1, -1.397693134862315708145274237317043567981e+308:1, -1.297693134862315708145274237317043567981e+308:1}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:1, -1.697693134862315708145274237317043567981e+308:1, -1.597693134862315708145274237317043567981e+308:1, -1.497693134862315708145274237317043567981e+308:1, -1.397693134862315708145274237317043567981e+308:1, -1.297693134862315708145274237317043567981e+308:1, -1.197693134862315708145274237317043567981e+308:1, -1.097693134862315708145274237317043567981e+308:1, -1.087693134862315708145274237317043567981e+308:1}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:3, 1.797693134862315708145274237317043567981e+308:2, -1.697693134862315708145274237317043567981e+308:1, -1.597693134862315708145274237317043567981e+308:1, 1.197693134862315708145274237317043567981e+308:1, 1.097693134862315708145274237317043567981e+308:1}, 
		map[float64]int{-1.797693134862315708145274237317043567981e+308:1, 1.697693134862315708145274237317043567981e+308:1, 1.597693134862315708145274237317043567981e+308:1, 1.497693134862315708145274237317043567981e+308:1, 1.397693134862315708145274237317043567981e+308:1, -1.297693134862315708145274237317043567981e+308:1, -1.197693134862315708145274237317043567981e+308:1, -1.097693134862315708145274237317043567981e+308:1, -1.087693134862315708145274237317043567981e+308:1}, 
		map[float64]int{1.797693134862315708145274237317043567981e+308:9}, 
		map[float64]int{1.797693134862315708145274237317043567981e+308:3, 1.697693134862315708145274237317043567981e+308:2, 1.597693134862315708145274237317043567981e+308:1, 1.497693134862315708145274237317043567981e+308:1, 1.397693134862315708145274237317043567981e+308:1, 1.297693134862315708145274237317043567981e+308:1}, 
		map[float64]int{1.797693134862315708145274237317043567981e+308:1, 1.697693134862315708145274237317043567981e+308:1, 1.597693134862315708145274237317043567981e+308:1, 1.497693134862315708145274237317043567981e+308:1, 1.397693134862315708145274237317043567981e+308:1, 1.297693134862315708145274237317043567981e+308:1, 1.197693134862315708145274237317043567981e+308:1, 1.097693134862315708145274237317043567981e+308:1, 1.087693134862315708145274237317043567981e+308:1}, 

		map[float64]int{-1.1:1}, 
		map[float64]int{19.12:1}, 
		map[float64]int{-1.1:2}, 
		map[float64]int{-1.1:1, -19.251:1}, 
		map[float64]int{-1.1:1, 71.971:1}, 
		map[float64]int{61.1:2}, 
		map[float64]int{61.1:1, 61082.0:1}, 
		map[float64]int{-100023.213:9}, 
		map[float64]int{-100.2:4, -881325432.0:1, -0.00001:2, -9.0:1, -3.4:1}, 
		map[float64]int{-1.0:1, -32.631245:1, -992.15:1, -5.1:1, -0.012501:1, -3.17:1, -9999.1:1, -1.000001:1, -5.0:1}, 
		map[float64]int{100.1:3, -4.12:1, -6.0031:1, 54.31:2, 76.152222:1, 0.0:1}, 
		map[float64]int{991.2:1, 23.6216:1, 7.16:1, 0.001247:1, -1.0:1, 37.1:1, 9.2:1, 41.8:1, 0.115123213:1}, 
		map[float64]int{100.53:9}, 
		map[float64]int{6.0:2, 12.7:1, 1183.32:1, 83247.134587:1, 0.01:2, 333.8:1, 983291839283.1:1}, 
		map[float64]int{235234236367647.0213123215:1, 0.01:1, 8442.2137:1, 0.0123123:1, 47657.231321452:1, 73.2125:1, 8.8888:1, 2.3:1, 65.2:1}, 
	}

	for i, data := range float64ListTests {
		list := NewFloat64List(data)
		actual := list.Counter()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get list counter: \ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}

func TestFloat64List_Unique(t *testing.T) {
	expected := [][]float64{
		[]float64{}, 
		[]float64{0.0}, 
		[]float64{0.0}, 
		[]float64{0.0}, 

		[]float64{-4.940656458412465441765687928682213723651e-324}, 
		[]float64{4.940656458412465441765687928682213723651e-324}, 
		[]float64{-4.940656458412465441765687928682213723651e-324}, 
		[]float64{-4.940656458412465441765687928682213723651e-324, -1.940656458412465441765687928682213723651e-324}, 
		[]float64{-4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324}, 
		[]float64{4.940656458412465441765687928682213723651e-324}, 
		[]float64{4.940656458412465441765687928682213723651e-324, 1.940656458412465441765687928682213723651e-324}, 
		[]float64{-4.940656458412465441765687928682213723651e-324}, 
		[]float64{4.940656458412465441765687928682213723651e-324}, 

		[]float64{-1.797693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308}, 
		[]float64{1.797693134862315708145274237317043567981e+308}, 
		[]float64{1.797693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, -1.497693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, -1.497693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.097693134862315708145274237317043567981e+308, -1.087693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, 1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308}, 
		[]float64{-1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.097693134862315708145274237317043567981e+308, -1.087693134862315708145274237317043567981e+308}, 
		[]float64{1.797693134862315708145274237317043567981e+308}, 
		[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308}, 
		[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308, 1.087693134862315708145274237317043567981e+308}, 

		[]float64{-1.1}, 
		[]float64{19.12}, 
		[]float64{-1.1}, 
		[]float64{-1.1, -19.251}, 
		[]float64{-1.1, 71.971}, 
		[]float64{61.1}, 
		[]float64{61.1, 61082.0}, 
		[]float64{-100023.213}, 
		[]float64{-100.2, -881325432.0, -0.00001, -9.0, -3.4}, 
		[]float64{-1.0, -32.631245, -992.15, -5.1, -0.012501, -3.17, -9999.1, -1.000001, -5.0}, 
		[]float64{100.1, -4.12, -6.0031, 54.31, 76.152222, 0.0}, 
		[]float64{991.2, 23.6216, 7.16, 0.001247, -1.0, 37.1, 9.2, 41.8, 0.115123213}, 
		[]float64{100.53}, 
		[]float64{6.0, 12.7, 1183.32, 83247.134587, 0.01, 333.8, 983291839283.1}, 
		[]float64{235234236367647.0213123215, 0.01, 8442.2137, 0.0123123, 47657.231321452, 73.2125, 8.8888, 2.3, 65.2}, 
	}

	for i, data := range float64ListTests {
		list := NewFloat64List(data)
		actual := list.Unique()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get unique list:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}


func TestFloat64List_Duplicates(t *testing.T) {
	expected := []Float64ListDuplicates{
		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}}, 
		Float64ListDuplicates{Float64ListDuplicate{0.0, 9}}, 

		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 9}}, 
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 9}}, 

		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 9}}, 
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 9}}, 
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 2}}, 
		Float64ListDuplicates{}, 

		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-1.1, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{61.1, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{-100023.213, 9}}, 
		Float64ListDuplicates{Float64ListDuplicate{-100.2, 4}, Float64ListDuplicate{-0.00001, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{100.1, 3}, Float64ListDuplicate{54.31, 2}}, 
		Float64ListDuplicates{}, 
		Float64ListDuplicates{Float64ListDuplicate{100.53, 9}}, 
		Float64ListDuplicates{Float64ListDuplicate{6.0, 2}, Float64ListDuplicate{0.01, 2}}, 
		Float64ListDuplicates{}, 
	}

	for i, data := range float64ListTests {
		list := NewFloat64List(data)
		actual := list.Duplicates()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get unique list:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}


/*	
	It is necessary to test:

	Type:
	- 0
	- min
	- max
	- rand(-max to max)

	Numbers:
	- 1
	- 2
	- 4
	- >4

	Negative:
	- all
	- part
	- no
*/

var float64ListDuplicatesTests = []Float64ListDuplicates{
	Float64ListDuplicates{},
	Float64ListDuplicates{Float64ListDuplicate{0.0, 2}},

	Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 3}},
	Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
	Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 5}, Float64ListDuplicate{-1.940656458412465441765687928682213723651e-324, 2}},
	Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 4}},
	Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}, Float64ListDuplicate{1.940656458412465441765687928682213723651e-324, 2}},

	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
	Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 5}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 7}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 4}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 9}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{-1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.002593134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 8}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 6}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}},
	Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 11}, Float64ListDuplicate{1.300013134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}},

	Float64ListDuplicates{Float64ListDuplicate{-0.0001, 2}},
	Float64ListDuplicates{Float64ListDuplicate{2813.1501, 3}},
	Float64ListDuplicates{Float64ListDuplicate{-52.01, 3}, Float64ListDuplicate{-28.1501, 3}},
	Float64ListDuplicates{Float64ListDuplicate{52.01, 2}, Float64ListDuplicate{-28.1501, 3}},
	Float64ListDuplicates{Float64ListDuplicate{2.0, 6}, Float64ListDuplicate{82374.02, 3}},
	Float64ListDuplicates{Float64ListDuplicate{-2.01, 3}, Float64ListDuplicate{-7.15, 3}, Float64ListDuplicate{-52001.01, 2}, Float64ListDuplicate{-9.9231, 6}},
	Float64ListDuplicates{Float64ListDuplicate{-921.21, 3}, Float64ListDuplicate{7252.15, 3}, Float64ListDuplicate{-921673.2726, 2}, Float64ListDuplicate{0.0, 6}},
	Float64ListDuplicates{Float64ListDuplicate{612.125, 7}, Float64ListDuplicate{0.15, 2}, Float64ListDuplicate{721.0, 2}, Float64ListDuplicate{1.0, 8}},
	Float64ListDuplicates{Float64ListDuplicate{-62.11, 3}, Float64ListDuplicate{-7542.99, 2}, Float64ListDuplicate{-6.01, 2}, Float64ListDuplicate{-90.9821, 6}, Float64ListDuplicate{-24.16, 3}, Float64ListDuplicate{-799.0, 2}, Float64ListDuplicate{-0.01, 4}, Float64ListDuplicate{-92.0, 4}, Float64ListDuplicate{-2.5131, 7}},
	Float64ListDuplicates{Float64ListDuplicate{6.1, 6}, Float64ListDuplicate{-748172.99, 2}, Float64ListDuplicate{124.37, 2}, Float64ListDuplicate{-0.9821, 2}, Float64ListDuplicate{8.1, 3}, Float64ListDuplicate{381203821983.036123, 2}, Float64ListDuplicate{0.0, 2}, Float64ListDuplicate{9.0, 4}, Float64ListDuplicate{81.02, 2}},
	Float64ListDuplicates{Float64ListDuplicate{92.21, 2}, Float64ListDuplicate{81792.99, 3}, Float64ListDuplicate{4.37, 2}, Float64ListDuplicate{0.8721, 5}, Float64ListDuplicate{80.1125, 3}, Float64ListDuplicate{83.036123, 3}, Float64ListDuplicate{45.0, 3}, Float64ListDuplicate{0.020032, 2}, Float64ListDuplicate{0.0, 6}},
}


func TestFloat64ListDuplicates_SortByValue(t *testing.T) {
	expected := []Float64ListDuplicates{
		Float64ListDuplicates{},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 3}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 5}, Float64ListDuplicate{-1.940656458412465441765687928682213723651e-324, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 4}},
		Float64ListDuplicates{Float64ListDuplicate{1.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
								
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 9}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.002593134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 8}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 6}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 11}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.300013134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}},

		Float64ListDuplicates{Float64ListDuplicate{-0.0001, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2813.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-52.01, 3}, Float64ListDuplicate{-28.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-28.1501, 3}, Float64ListDuplicate{52.01, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2.0, 6}, Float64ListDuplicate{82374.02, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-52001.01, 2}, Float64ListDuplicate{-9.9231, 6}, Float64ListDuplicate{-7.15, 3}, Float64ListDuplicate{-2.01, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-921673.2726, 2}, Float64ListDuplicate{-921.21, 3}, Float64ListDuplicate{0.0, 6}, Float64ListDuplicate{7252.15, 3}},
		Float64ListDuplicates{Float64ListDuplicate{0.15, 2}, Float64ListDuplicate{1.0, 8}, Float64ListDuplicate{612.125, 7}, Float64ListDuplicate{721.0, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-7542.99, 2}, Float64ListDuplicate{-799.0, 2}, Float64ListDuplicate{-92.0, 4}, Float64ListDuplicate{-90.9821, 6}, Float64ListDuplicate{-62.11, 3}, Float64ListDuplicate{-24.16, 3}, Float64ListDuplicate{-6.01, 2}, Float64ListDuplicate{-2.5131, 7}, Float64ListDuplicate{-0.01, 4}},
		Float64ListDuplicates{Float64ListDuplicate{-748172.99, 2}, Float64ListDuplicate{-0.9821, 2}, Float64ListDuplicate{0.0, 2}, Float64ListDuplicate{6.1, 6}, Float64ListDuplicate{8.1, 3}, Float64ListDuplicate{9.0, 4}, Float64ListDuplicate{81.02, 2}, Float64ListDuplicate{124.37, 2}, Float64ListDuplicate{381203821983.036123, 2}},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 6}, Float64ListDuplicate{0.020032, 2}, Float64ListDuplicate{0.8721, 5}, Float64ListDuplicate{4.37, 2}, Float64ListDuplicate{45.0, 3}, Float64ListDuplicate{80.1125, 3}, Float64ListDuplicate{83.036123, 3}, Float64ListDuplicate{92.21, 2}, Float64ListDuplicate{81792.99, 3}},
	}

	actual := make([]Float64ListDuplicates, len(float64ListDuplicatesTests))
	for i, ds := range float64ListDuplicatesTests {
	    actual[i] = make(Float64ListDuplicates, len(ds))
	    copy(actual[i], ds)
		actual[i].SortByValue()
		if !reflect.DeepEqual(actual[i], expected[i]) {
			t.Errorf("cannot sort duplicates by value:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", float64ListDuplicatesTests[i], actual[i], expected[i])
		}
	}
}

func TestFloat64ListDuplicates_SortByValueReverse(t *testing.T) {
	expected := []Float64ListDuplicates{
		Float64ListDuplicates{},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 3}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-1.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 5}, },
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 4}, Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}, Float64ListDuplicate{1.940656458412465441765687928682213723651e-324, 2}},
								
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 9}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 6}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 8}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.300013134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 11}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-0.0001, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2813.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-28.1501, 3}, Float64ListDuplicate{-52.01, 3}},
		Float64ListDuplicates{Float64ListDuplicate{52.01, 2}, Float64ListDuplicate{-28.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{82374.02, 3}, Float64ListDuplicate{2.0, 6}},
		Float64ListDuplicates{Float64ListDuplicate{-2.01, 3}, Float64ListDuplicate{-7.15, 3}, Float64ListDuplicate{-9.9231, 6}, Float64ListDuplicate{-52001.01, 2}},
		Float64ListDuplicates{Float64ListDuplicate{7252.15, 3}, Float64ListDuplicate{0.0, 6}, Float64ListDuplicate{-921.21, 3}, Float64ListDuplicate{-921673.2726, 2}},
		Float64ListDuplicates{Float64ListDuplicate{721.0, 2}, Float64ListDuplicate{612.125, 7}, Float64ListDuplicate{1.0, 8}, Float64ListDuplicate{0.15, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-0.01, 4}, Float64ListDuplicate{-2.5131, 7}, Float64ListDuplicate{-6.01, 2}, Float64ListDuplicate{-24.16, 3}, Float64ListDuplicate{-62.11, 3}, Float64ListDuplicate{-90.9821, 6}, Float64ListDuplicate{-92.0, 4}, Float64ListDuplicate{-799.0, 2}, Float64ListDuplicate{-7542.99, 2}},
		Float64ListDuplicates{Float64ListDuplicate{381203821983.036123, 2}, Float64ListDuplicate{124.37, 2}, Float64ListDuplicate{81.02, 2}, Float64ListDuplicate{9.0, 4}, Float64ListDuplicate{8.1, 3}, Float64ListDuplicate{6.1, 6}, Float64ListDuplicate{0.0, 2}, Float64ListDuplicate{-0.9821, 2}, Float64ListDuplicate{-748172.99, 2}},
		Float64ListDuplicates{Float64ListDuplicate{81792.99, 3}, Float64ListDuplicate{92.21, 2}, Float64ListDuplicate{83.036123, 3}, Float64ListDuplicate{80.1125, 3}, Float64ListDuplicate{45.0, 3}, Float64ListDuplicate{4.37, 2}, Float64ListDuplicate{0.8721, 5}, Float64ListDuplicate{0.020032, 2}, Float64ListDuplicate{0.0, 6}},
	}

	actual := make([]Float64ListDuplicates, len(float64ListDuplicatesTests))
	for i, ds := range float64ListDuplicatesTests {
	    actual[i] = make(Float64ListDuplicates, len(ds))
	    copy(actual[i], ds)
		actual[i].SortByValueReverse()
		if !reflect.DeepEqual(actual[i], expected[i]) {
			t.Errorf("cannot sort duplicates by value (reverse):\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", float64ListDuplicatesTests[i], actual[i], expected[i])
		}
	}

}

func TestFloat64ListDuplicates_SortByCount(t *testing.T) {
	expected := []Float64ListDuplicates{
		Float64ListDuplicates{},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 3}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-1.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 5}},
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 4}},
		Float64ListDuplicates{Float64ListDuplicate{1.940656458412465441765687928682213723651e-324, 2}, Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},

		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 7}},		
		Float64ListDuplicates{Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 9}},		
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 6}, Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 8}},		
		
		Float64ListDuplicates{Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.300013134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 11}},
		Float64ListDuplicates{Float64ListDuplicate{-0.0001, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2813.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-52.01, 3}, Float64ListDuplicate{-28.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{52.01, 2}, Float64ListDuplicate{-28.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{82374.02, 3}, Float64ListDuplicate{2.0, 6}},
		Float64ListDuplicates{Float64ListDuplicate{-52001.01, 2}, Float64ListDuplicate{-2.01, 3}, Float64ListDuplicate{-7.15, 3}, Float64ListDuplicate{-9.9231, 6}},
		Float64ListDuplicates{Float64ListDuplicate{-921673.2726, 2}, Float64ListDuplicate{-921.21, 3}, Float64ListDuplicate{7252.15, 3}, Float64ListDuplicate{0.0, 6}},
		Float64ListDuplicates{Float64ListDuplicate{0.15, 2}, Float64ListDuplicate{721.0, 2}, Float64ListDuplicate{612.125, 7}, Float64ListDuplicate{1.0, 8}},
		Float64ListDuplicates{Float64ListDuplicate{-7542.99, 2}, Float64ListDuplicate{-6.01, 2}, Float64ListDuplicate{-799.0, 2}, Float64ListDuplicate{-62.11, 3}, Float64ListDuplicate{-24.16, 3}, Float64ListDuplicate{-0.01, 4}, Float64ListDuplicate{-92.0, 4}, Float64ListDuplicate{-90.9821, 6}, Float64ListDuplicate{-2.5131, 7}},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}, Float64ListDuplicate{-748172.99, 2}, Float64ListDuplicate{124.37, 2}, Float64ListDuplicate{-0.9821, 2}, Float64ListDuplicate{381203821983.036123, 2}, Float64ListDuplicate{81.02, 2}, Float64ListDuplicate{8.1, 3}, Float64ListDuplicate{9.0, 4}, Float64ListDuplicate{6.1, 6}},
		Float64ListDuplicates{Float64ListDuplicate{92.21, 2}, Float64ListDuplicate{0.020032, 2}, Float64ListDuplicate{4.37, 2}, Float64ListDuplicate{80.1125, 3}, Float64ListDuplicate{83.036123, 3}, Float64ListDuplicate{45, 3}, Float64ListDuplicate{81792.99, 3}, Float64ListDuplicate{0.8721, 5}, Float64ListDuplicate{0, 6}},
	}

	actual := make([]Float64ListDuplicates, len(float64ListDuplicatesTests))
	for i, ds := range float64ListDuplicatesTests {
	    actual[i] = make(Float64ListDuplicates, len(ds))
	    copy(actual[i], ds)
		actual[i].SortByCount()
		if !reflect.DeepEqual(actual[i], expected[i]) {
			t.Errorf("cannot sort duplicates by count:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", float64ListDuplicatesTests[i], actual[i], expected[i])
		}
	}
}

func TestFloat64ListDuplicates_SortByCountReverse(t *testing.T) {
	expected := []Float64ListDuplicates{
		Float64ListDuplicates{},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 3}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}},
		Float64ListDuplicates{Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 5}, Float64ListDuplicate{-1.940656458412465441765687928682213723651e-324, 2}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 4}, Float64ListDuplicate{-4.940656458412465441765687928682213723651e-324, 2}},
		Float64ListDuplicates{Float64ListDuplicate{4.940656458412465441765687928682213723651e-324, 7}, Float64ListDuplicate{1.940656458412465441765687928682213723651e-324, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 5}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 2}},		
		Float64ListDuplicates{Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 9}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.100093134862315708145274237317043567981e+308, 3},   Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2},		Float64ListDuplicate{-1.002593134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-1.697693134862315708145274237317043567981e+308, 8}, Float64ListDuplicate{-1.247693134862315708145274237317043567981e+308, 6}, Float64ListDuplicate{-1.197693134862315708145274237317043567981e+308, 4},	Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{-1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.797693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{-1.300013134862315708145274237317043567981e+308, 2},  Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.100093134862315708145274237317043567981e+308, 11}, Float64ListDuplicate{1.247693134862315708145274237317043567981e+308, 7}, Float64ListDuplicate{1.697693134862315708145274237317043567981e+308, 5}, Float64ListDuplicate{1.197693134862315708145274237317043567981e+308, 4},  Float64ListDuplicate{1.297693134862315708145274237317043567981e+308, 3}, Float64ListDuplicate{1.797693134862315708145274237317043567981e+308, 3}, 		Float64ListDuplicate{1.300013134862315708145274237317043567981e+308, 3},		Float64ListDuplicate{1.397693134862315708145274237317043567981e+308, 2}, Float64ListDuplicate{1.002593134862315708145274237317043567981e+308, 2}},

		Float64ListDuplicates{Float64ListDuplicate{-0.0001, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2813.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-52.01, 3}, Float64ListDuplicate{-28.1501, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-28.1501, 3}, Float64ListDuplicate{52.01, 2}},
		Float64ListDuplicates{Float64ListDuplicate{2.0, 6}, Float64ListDuplicate{82374.02, 3}},
		Float64ListDuplicates{Float64ListDuplicate{-9.9231, 6}, Float64ListDuplicate{-2.01, 3}, Float64ListDuplicate{-7.15, 3}, Float64ListDuplicate{-52001.01, 2}},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 6}, Float64ListDuplicate{-921.21, 3}, Float64ListDuplicate{7252.15, 3}, Float64ListDuplicate{-921673.2726, 2}},
		Float64ListDuplicates{Float64ListDuplicate{1.0, 8}, Float64ListDuplicate{612.125, 7}, Float64ListDuplicate{0.15, 2}, Float64ListDuplicate{721.0, 2}},
		Float64ListDuplicates{Float64ListDuplicate{-2.5131, 7}, Float64ListDuplicate{-90.9821, 6}, Float64ListDuplicate{-0.01, 4}, Float64ListDuplicate{-92.0, 4}, Float64ListDuplicate{-24.16, 3}, Float64ListDuplicate{-62.11, 3}, Float64ListDuplicate{-799.0, 2}, Float64ListDuplicate{-7542.99, 2}, Float64ListDuplicate{-6.01, 2}},
		Float64ListDuplicates{Float64ListDuplicate{6.1, 6}, Float64ListDuplicate{9.0, 4}, Float64ListDuplicate{8.1, 3}, Float64ListDuplicate{124.37, 2}, Float64ListDuplicate{-0.9821, 2}, Float64ListDuplicate{381203821983.036123, 2}, Float64ListDuplicate{0.0, 2}, Float64ListDuplicate{-748172.99, 2}, Float64ListDuplicate{81.02, 2}},
		Float64ListDuplicates{Float64ListDuplicate{0.0, 6}, Float64ListDuplicate{0.8721, 5}, Float64ListDuplicate{45.0, 3}, Float64ListDuplicate{81792.99, 3}, Float64ListDuplicate{80.1125, 3}, Float64ListDuplicate{83.036123, 3}, Float64ListDuplicate{92.21, 2}, Float64ListDuplicate{0.020032, 2}, Float64ListDuplicate{4.37, 2}},
	}

	actual := make([]Float64ListDuplicates, len(float64ListDuplicatesTests))
	for i, ds := range float64ListDuplicatesTests {
	    actual[i] = make(Float64ListDuplicates, len(ds))
	    copy(actual[i], ds)
		actual[i].SortByCountReverse()
		if !reflect.DeepEqual(actual[i], expected[i]) {
			t.Errorf("cannot sort duplicates by count (reverse):\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", float64ListDuplicatesTests[i], actual[i], expected[i])
		}
	}
}

func TestFloat64ListDuplicates_Values(t *testing.T) {
	expected := [][]float64{
		[]float64{},
		[]float64{0.0},

		[]float64{-4.940656458412465441765687928682213723651e-324},
		[]float64{4.940656458412465441765687928682213723651e-324},
		[]float64{-4.940656458412465441765687928682213723651e-324, -1.940656458412465441765687928682213723651e-324},
		[]float64{-4.940656458412465441765687928682213723651e-324, 4.940656458412465441765687928682213723651e-324},
		[]float64{4.940656458412465441765687928682213723651e-324, 1.940656458412465441765687928682213723651e-324},

		[]float64{-1.797693134862315708145274237317043567981e+308},
		[]float64{1.797693134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308},
		[]float64{1.797693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308},
		[]float64{1.797693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.247693134862315708145274237317043567981e+308, -1.100093134862315708145274237317043567981e+308, -1.300013134862315708145274237317043567981e+308, -1.002593134862315708145274237317043567981e+308},
		[]float64{-1.797693134862315708145274237317043567981e+308, -1.197693134862315708145274237317043567981e+308, -1.297693134862315708145274237317043567981e+308, -1.397693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.247693134862315708145274237317043567981e+308, 1.100093134862315708145274237317043567981e+308, -1.300013134862315708145274237317043567981e+308, 1.002593134862315708145274237317043567981e+308},
		[]float64{1.797693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.247693134862315708145274237317043567981e+308, 1.100093134862315708145274237317043567981e+308, 1.300013134862315708145274237317043567981e+308, 1.002593134862315708145274237317043567981e+308},

		[]float64{-0.0001},
		[]float64{2813.1501},
		[]float64{-52.01, -28.1501},
		[]float64{52.01, -28.1501},
		[]float64{2.0, 82374.02},
		[]float64{-2.01, -7.15, -52001.01, -9.9231},
		[]float64{-921.21, 7252.15, -921673.2726, 0.0},
		[]float64{612.125, 0.15, 721.0, 1.0},
		[]float64{-62.11, -7542.99, -6.01, -90.9821, -24.16, -799.0, -0.01, -92.0, -2.5131},
		[]float64{6.1, -748172.99, 124.37, -0.9821, 8.1, 381203821983.036123, 0.0, 9.0, 81.02},
		[]float64{92.21, 81792.99, 4.37, 0.8721, 80.1125, 83.036123, 45.0, 0.020032, 0.0},
	}
	
	for i, ds := range float64ListDuplicatesTests {
		actual := ds.Values()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get duplicate values:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n", ds, actual, expected[i])
		}
	}	
}

func TestFloat64ListDuplicates_Counts(t *testing.T) {
	expected := [][]int{
		[]int{},
		[]int{2},

		[]int{3},
		[]int{7},
		[]int{5, 2},
		[]int{2, 4},
		[]int{7, 2},

		[]int{3},
		[]int{5},
		[]int{3, 2},
		[]int{3, 2},
		[]int{3, 7},
		[]int{3, 2, 3, 2},
		[]int{3, 2, 5, 2},
		[]int{7, 2, 3, 4},
		[]int{3, 4, 3, 2, 9, 7, 3, 2, 2},
		[]int{2, 4, 3, 2, 8, 6, 3, 2, 2},
		[]int{3, 4, 3, 2, 5, 7, 11, 3, 2},

		[]int{2},
		[]int{3},
		[]int{3, 3},
		[]int{2, 3},
		[]int{6, 3},
		[]int{3, 3, 2, 6},
		[]int{3, 3, 2, 6},
		[]int{7, 2, 2, 8},
		[]int{3, 2, 2, 6, 3, 2, 4, 4, 7},
		[]int{6, 2, 2, 2, 3, 2, 2, 4, 2},
		[]int{2, 3, 2, 5, 3, 3, 3, 2, 6},
	}
	
	for i, ds := range float64ListDuplicatesTests {
		actual := ds.Counts()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get duplicate counts:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n", ds, actual, expected[i])
		}
	}	
}


/*	
	It is necessary to test:

	Numbers:
	- 1 
	- 2 
	- >2

	The length of the string (number of words):
	- 1 
	- 2
	- >2

	Lang. count:
	- 1
	- 2

	Case:
	- Upper
	- Lower
	- Mix

	Others:
	- Hyphen (word)
	- Contractions
	- Mixing letters
	- Non-abc characters
*/

var stringListTests = [][]string{
	[]string{"КАК-ТО"},
	[]string{"DON'T"},
	[]string{"DОN'T"},

	[]string{"отгадайте-ка"},
	[]string{"aren't"},
	[]string{"prоgrеss"},

	[]string{"Каким-ТО"},
	[]string{"CAN't"},
	[]string{"TrАvЕl"},

	[]string{"КАК-ТО ТАК!"},
	[]string{"язык программирования"},
	[]string{"it's cООl"},

	[]string{"ПРИВЕТ JOHN."},
	[]string{"go! беги!!!"},
	[]string{"я Karlsson!💪"},

	[]string{"- И  ТРАВА НАКЛОНИЛИСЬ  ВЛЕВО, И  ОТ ЕЛКИ ОСТАЛАСЬ  ОДНА  ВЕРШИНА,  И  ТЕПЕРЬ  ОНА ПЛЫВЕТ  РЯДОМ  С 🦄..."},
	[]string{"...садитесь ко мне на спину, \n- беззвучно проговорил  кто-то."},
	[]string{"Ежик  сел  на  чью-то узкую  скользкую спину и через минуту оказался на берегу."},

	[]string{"ТАК, ПАРИЖСКИЙ ЖУРНАЛ «REVUE POSITIVISTE» УПРЕКАЕТ МЕНЯ, С ОДНОЙ СТОРОНЫ, В ТОМ, ЧТО Я РАССМАТРИВАЮ ПОЛИТИЧЕСКУЮ ЭКОНОМИЮ МЕТАФИЗИЧЕСКИ..."},
	[]string{"язык программирования - golang"},
	[]string{"-- А в каком возрасте бывает расцвет сил? \n-- В любом! -- ответил KarlssОn с довольной улыбкой."},

	[]string{"Я", "Я"},
	[]string{"нет", "да"},
	[]string{"Как-то", "как-то"},
	[]string{"Can't", "Саn't"}, // мixing letters

	[]string{"ПОДУМАЛ ЕЖИК", "ГЛУБОКО ВЗДОХНУЛ"},
	[]string{"шуршала камышами", "шуршала камышами"},
	[]string{"По-прежнему темно✨", "По-прежнему темно✨"},

	[]string{"ПРЕДЕЛЫ AB", "ПРОДЕЛКИ KARLSSОN"},
	[]string{"линия а______b", " линия а______b"},
	[]string{"Дорогой KARLSSОN!", "Теперь понял?"},

	[]string{"СТОЙ! - КРИКНУЛ ЕЖИК. - СЛУШАЙ! МЕДВЕЖОНОК ЗАМЕР.", " -- ТЫ ОЧЕНЬ ЛЮБИШЬ ГУНИЛЛУ? -- СПРОСИЛА МАМА."},
	[]string{"нормы прибыли всегда происходит вследствие того, что прибавочная стоимость увеличивается относительно или абсолютно по сравнению с издержками ее производства", "т. е. с размерами всего авансированного капитала; другими словами, вследствие того, что разница между нормой прибыли и нормой прибавочной стоимости уменьшается"},
	[]string{"- А где ж он теперь, Ветер? -  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?", "- А где ж он теперь, Ветер? \n-  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?"},

	[]string{"В ПЕРЕВОДЕ НА РУССКИЙ ЯЗЫК, ГЛАГОЛ CAN ЗНАЧИТ МОГУ, СООТВЕТСТВЕННО CAN'T (CAN NOT) ЗНАЧИТ НЕ МОГУ.", "ПРОФЕССОР WILHELM LEXIS ПОДНЯЛ ЭТОТ ВОПРОС, ХОТЯ И НЕ ПОЖЕЛАЛ ДАТЬ ПРЯМОГО РЕШЕНИЯ"},
	[]string{"каждое в 8 страниц in folio", "каждое в 8 страниц in fоliо"}, // мixing letters
	[]string{"В берлинском журнале «Concordia», органе союза немецких фабрикантов...", "В берлинском журнале «concordia», органе союза немецких фабрикантов..."},

	[]string{"МЕДВЕЖОНОК", "КАК", "КАК-ТО", "ИНДИВИДЫ", "🦄", "MARX", "ПРОИЗВОДЯЩИЕ", "ОПРЕДЕЛЕННОЕ", "ПРОИЗВОДСТВО", "ИНДИВИДОВ", "МЕДВЕЖОНОК", "КАК-ТО", "МЕДВЕЖОНОК", "🦄"},
	[]string{"данная", "идея", "явилась", "в", "готовом", "и", "законченном", "виде"},
	[]string{"Обществе", "Don't", "свободной", "конкуренции", "обществе", "как-то", "продолжительности", "Dоn't", "рабочего", "дня"}, // мixing letters

	[]string{"В ПЕРВУЮ", "THE CORN-LANDS", "HEY! 😅", "ПЯТНАДЦАТЬ ШТУК", "одно замечание", "CAN'T GO", "CАN'T GО"}, // мixing letters
	[]string{"два капитала", "малыш молчал", "р': р'1", "don't mind", "now would", " be incorrect", "он ка-ак...", "р':\tр'1"},
	[]string{"If you've...", "величины стоимости", "наш Робинзон", "?14>2*17 ()(((!", "А. Смит", "меновая стоимость", "потребительная стоимость", "величины стоимости"},

	[]string{"НУ! MAX!", "RED ШАПОЧКА", "НАШ ILLUSTRE", " ТОВАРА [KOSTPREIS]", "ОПОСРЕДСТВОВАННОГО (CIRCUITOUS)"},
	[]string{"обеспечивали («supplied»)", "«авансирования» – «avance»", "определяет implicite", "«авансирования» – «avance»", "обеспечивали («supplied»)", "определяет implicite"},
	[]string{"Малыш и Karlsson", "Малыш и Karlsson", "Малыш и Karlsson", "Малыш и Karlsson", "Малыш и Karlsson"},

	[]string{"ВИДАЛ  МИНДАЛ! -- ВОСКЛИКНУЛ ОН ХВАСТЛИВО.", "ДА КАК ТЫ НА НЕГО ВЗОБРАЛСЯ?", "ВИДАЛ  МИНДАЛ! -- ВОСКЛИКНУЛ ОН ХВАСТЛИВО.", "ДА КАК ТЫ НА НЕГО ВЗОБРАЛСЯ?", "ВОЗМОЖНО, ДАЛЕЕ, ЧТО В САМОЙ ИНДИИ ПРЯЖА ОПЯТЬ-ТАКИ ПРОДАЕТСЯ В КРЕДИТ.", "ВИДАЛ  МИНДАЛ! -- ВОСКЛИКНУЛ ОН ХВАСТЛИВО."},
	[]string{"мама почему-то ужасно испугалась и вызвала пожарников", " ", "придется  проводить много-много  часов  с  глазу  на  глаз с домомучительницей", "as hadn't checked (or had not checked) is the past perfect tense", "", "мама почему-то  ужасно испугалась и вызвала пожарников", " ", "днем пить сок и грызть  пряники,  конечно, если  они  есть"},
	[]string{"На  другой  день  мама  уехала к бабушке. Провожая ее, все плакали, а Малыш больше всех.", "Мама вздохнула:\n-- Еще неизвестно, сможем ли мы найти домработницу.", "Can I watch downloads when I'm offline or outside the UK?", "Постарайся быть молодцом... ради меня!  И, пожалуйста, не зови ее домомучительницей.", "Малыш  подумал  и вынужден был признать, что Карлсон прав. \"Низводить\" и в самом деле звучало куда более смешно.", "Мама вздохнула:\n-- Еще неизвестно, сможем ли мы найти домработницу."},

	[]string{"ВОТ ЧЕМ ДОПОЛНЯЕТСЯ ЭТО PERPETUUM MOBILE БОГАТСТВА", "ВОТ ЧЕМ ДОПОЛНЯЕТСЯ ЭТО PERPETUUM MOBILE БОГАТСТВА", "ВОТ ЧЕМ ДОПОЛНЯЕТСЯ ЭТО PERPETUUM MOBILE БОГАТСТВА", "НА СВОИ ДЕНЬГИ ВОЗМЕЩАЕТ IN NATURA ТОЛЬКО ОБОРОТНУЮ ЧАСТЬ СВОЕГО ПОСТОЯННОГО КАПИТАЛА", "НО НЕ ВОЗОБНОВЛЯЕТ СВОЙ ОСНОВНОЙ КАПИТАЛ IN NATURA"},
	[]string{"в которых мысли записывались in statu nascendi", "но с точки зрения данного капиталиста c'est un fait", "общественный разум всегда заявляет о себе только post festum", "но с точки зрения данного капиталиста c'est un fait", "которые получаются при обработке льна в небольших водяных льночесальнях (scutch mills)...", "но с точки зрения данного капиталиста c'est un fait\t"},
	[]string{"отчет Редгрейва в «Reports of Insp. of Fact., October 1852», p. 58–59", "Оно начинается post festum [задним числом], т. е. исходит из готовых результатов процесса развития.", "...он определяет как основной капитал «Instruments of Trade»"},

}


func TestStringList_Counter(t *testing.T) {
	expected := []map[string]int{
		map[string]int{"КАК-ТО": 1},
		map[string]int{"DON'T": 1},
		map[string]int{"DОN'T": 1},

		map[string]int{"отгадайте-ка": 1},
		map[string]int{"aren't": 1},
		map[string]int{"prоgrеss": 1},

		map[string]int{"Каким-ТО": 1},
		map[string]int{"CAN't": 1},
		map[string]int{"TrАvЕl": 1},

		map[string]int{"КАК-ТО ТАК!": 1},
		map[string]int{"язык программирования": 1},
		map[string]int{"it's cООl": 1},

		map[string]int{"ПРИВЕТ JOHN.": 1},
		map[string]int{"go! беги!!!": 1},
		map[string]int{"я Karlsson!💪": 1},

		map[string]int{"- И  ТРАВА НАКЛОНИЛИСЬ  ВЛЕВО, И  ОТ ЕЛКИ ОСТАЛАСЬ  ОДНА  ВЕРШИНА,  И  ТЕПЕРЬ  ОНА ПЛЫВЕТ  РЯДОМ  С 🦄...": 1},
		map[string]int{"...садитесь ко мне на спину, \n- беззвучно проговорил  кто-то.": 1},
		map[string]int{"Ежик  сел  на  чью-то узкую  скользкую спину и через минуту оказался на берегу.": 1},

		map[string]int{"ТАК, ПАРИЖСКИЙ ЖУРНАЛ «REVUE POSITIVISTE» УПРЕКАЕТ МЕНЯ, С ОДНОЙ СТОРОНЫ, В ТОМ, ЧТО Я РАССМАТРИВАЮ ПОЛИТИЧЕСКУЮ ЭКОНОМИЮ МЕТАФИЗИЧЕСКИ...": 1},
		map[string]int{"язык программирования - golang": 1},
		map[string]int{"-- А в каком возрасте бывает расцвет сил? \n-- В любом! -- ответил KarlssОn с довольной улыбкой.": 1},

		map[string]int{"Я":2},
		map[string]int{"нет": 1, "да": 1},
		map[string]int{"Как-то": 1, "как-то": 1},
		map[string]int{"Can't": 1, "Саn't": 1}, // мixing letters

		map[string]int{"ПОДУМАЛ ЕЖИК": 1, "ГЛУБОКО ВЗДОХНУЛ": 1},
		map[string]int{"шуршала камышами": 2},
		map[string]int{"По-прежнему темно✨": 2},

		map[string]int{"ПРЕДЕЛЫ AB": 1, "ПРОДЕЛКИ KARLSSОN": 1},
		map[string]int{"линия а______b": 1, " линия а______b": 1},
		map[string]int{"Дорогой KARLSSОN!": 1, "Теперь понял?": 1},

		map[string]int{"СТОЙ! - КРИКНУЛ ЕЖИК. - СЛУШАЙ! МЕДВЕЖОНОК ЗАМЕР.": 1, " -- ТЫ ОЧЕНЬ ЛЮБИШЬ ГУНИЛЛУ? -- СПРОСИЛА МАМА.": 1},
		map[string]int{"нормы прибыли всегда происходит вследствие того, что прибавочная стоимость увеличивается относительно или абсолютно по сравнению с издержками ее производства": 1, "т. е. с размерами всего авансированного капитала; другими словами, вследствие того, что разница между нормой прибыли и нормой прибавочной стоимости уменьшается": 1},
		map[string]int{"- А где ж он теперь, Ветер? -  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?": 1, "- А где ж он теперь, Ветер? \n-  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?": 1},

		map[string]int{"В ПЕРЕВОДЕ НА РУССКИЙ ЯЗЫК, ГЛАГОЛ CAN ЗНАЧИТ МОГУ, СООТВЕТСТВЕННО CAN'T (CAN NOT) ЗНАЧИТ НЕ МОГУ.": 1, "ПРОФЕССОР WILHELM LEXIS ПОДНЯЛ ЭТОТ ВОПРОС, ХОТЯ И НЕ ПОЖЕЛАЛ ДАТЬ ПРЯМОГО РЕШЕНИЯ": 1},
		map[string]int{"каждое в 8 страниц in folio": 1, "каждое в 8 страниц in fоliо": 1}, // мixing letters
		map[string]int{"В берлинском журнале «Concordia», органе союза немецких фабрикантов...": 1, "В берлинском журнале «concordia», органе союза немецких фабрикантов...": 1},

		map[string]int{"МЕДВЕЖОНОК": 3, "КАК": 1, "КАК-ТО": 2, "ИНДИВИДЫ": 1, "🦄": 2, "MARX": 1, "ПРОИЗВОДЯЩИЕ": 1, "ОПРЕДЕЛЕННОЕ": 1, "ПРОИЗВОДСТВО": 1, "ИНДИВИДОВ": 1},
		map[string]int{"данная": 1, "идея": 1, "явилась": 1, "в": 1, "готовом": 1, "и": 1, "законченном": 1, "виде": 1},
		map[string]int{"Обществе": 1, "Don't": 1, "свободной": 1, "конкуренции": 1, "обществе": 1, "как-то": 1, "продолжительности": 1, "Dоn't": 1, "рабочего": 1, "дня": 1}, // мixing letters

		map[string]int{"В ПЕРВУЮ": 1, "THE CORN-LANDS": 1, "HEY! 😅": 1, "ПЯТНАДЦАТЬ ШТУК": 1, "одно замечание": 1, "CAN'T GO": 1, "CАN'T GО": 1}, // мixing letters
		map[string]int{"два капитала": 1, "малыш молчал": 1, "р': р'1": 1, "don't mind": 1, "now would": 1, " be incorrect": 1, "он ка-ак...": 1, "р':\tр'1": 1},
		map[string]int{"If you've...": 1, "величины стоимости": 2, "наш Робинзон": 1, "?14>2*17 ()(((!": 1, "А. Смит": 1, "меновая стоимость": 1, "потребительная стоимость": 1},

		map[string]int{"НУ! MAX!": 1, "RED ШАПОЧКА": 1, "НАШ ILLUSTRE": 1, " ТОВАРА [KOSTPREIS]": 1, "ОПОСРЕДСТВОВАННОГО (CIRCUITOUS)": 1},
		map[string]int{"обеспечивали («supplied»)": 2, "«авансирования» – «avance»": 2, "определяет implicite": 2},
		map[string]int{"Малыш и Karlsson": 5},

		map[string]int{"ВИДАЛ  МИНДАЛ! -- ВОСКЛИКНУЛ ОН ХВАСТЛИВО.": 3, "ДА КАК ТЫ НА НЕГО ВЗОБРАЛСЯ?": 2, "ВОЗМОЖНО, ДАЛЕЕ, ЧТО В САМОЙ ИНДИИ ПРЯЖА ОПЯТЬ-ТАКИ ПРОДАЕТСЯ В КРЕДИТ.": 1},
		map[string]int{"мама почему-то ужасно испугалась и вызвала пожарников": 1, " ": 2, "придется  проводить много-много  часов  с  глазу  на  глаз с домомучительницей": 1, "as hadn't checked (or had not checked) is the past perfect tense": 1, "": 1, "мама почему-то  ужасно испугалась и вызвала пожарников": 1, "днем пить сок и грызть  пряники,  конечно, если  они  есть": 1},
		map[string]int{"На  другой  день  мама  уехала к бабушке. Провожая ее, все плакали, а Малыш больше всех.": 1, "Мама вздохнула:\n-- Еще неизвестно, сможем ли мы найти домработницу.": 2, "Can I watch downloads when I'm offline or outside the UK?": 1, "Постарайся быть молодцом... ради меня!  И, пожалуйста, не зови ее домомучительницей.": 1, "Малыш  подумал  и вынужден был признать, что Карлсон прав. \"Низводить\" и в самом деле звучало куда более смешно.": 1},

		map[string]int{"ВОТ ЧЕМ ДОПОЛНЯЕТСЯ ЭТО PERPETUUM MOBILE БОГАТСТВА": 3, "НА СВОИ ДЕНЬГИ ВОЗМЕЩАЕТ IN NATURA ТОЛЬКО ОБОРОТНУЮ ЧАСТЬ СВОЕГО ПОСТОЯННОГО КАПИТАЛА": 1, "НО НЕ ВОЗОБНОВЛЯЕТ СВОЙ ОСНОВНОЙ КАПИТАЛ IN NATURA": 1},
		map[string]int{"в которых мысли записывались in statu nascendi": 1, "но с точки зрения данного капиталиста c'est un fait": 2, "общественный разум всегда заявляет о себе только post festum": 1, "которые получаются при обработке льна в небольших водяных льночесальнях (scutch mills)...": 1, "но с точки зрения данного капиталиста c'est un fait\t": 1},
		map[string]int{"отчет Редгрейва в «Reports of Insp. of Fact., October 1852», p. 58–59": 1, "Оно начинается post festum [задним числом], т. е. исходит из готовых результатов процесса развития.": 1, "...он определяет как основной капитал «Instruments of Trade»": 1},
	}

	for i, data := range stringListTests {
		list := NewStringList(data)
		actual := list.Counter()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get list counter:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}

func TestStringList_Unique(t *testing.T) {
	expected := [][]string{
		[]string{"КАК-ТО"},
		[]string{"DON'T"},
		[]string{"DОN'T"},

		[]string{"отгадайте-ка"},
		[]string{"aren't"},
		[]string{"prоgrеss"},

		[]string{"Каким-ТО"},
		[]string{"CAN't"},
		[]string{"TrАvЕl"},

		[]string{"КАК-ТО ТАК!"},
		[]string{"язык программирования"},
		[]string{"it's cООl"},

		[]string{"ПРИВЕТ JOHN."},
		[]string{"go! беги!!!"},
		[]string{"я Karlsson!💪"},

		[]string{"- И  ТРАВА НАКЛОНИЛИСЬ  ВЛЕВО, И  ОТ ЕЛКИ ОСТАЛАСЬ  ОДНА  ВЕРШИНА,  И  ТЕПЕРЬ  ОНА ПЛЫВЕТ  РЯДОМ  С 🦄..."},
		[]string{"...садитесь ко мне на спину, \n- беззвучно проговорил  кто-то."},
		[]string{"Ежик  сел  на  чью-то узкую  скользкую спину и через минуту оказался на берегу."},

		[]string{"ТАК, ПАРИЖСКИЙ ЖУРНАЛ «REVUE POSITIVISTE» УПРЕКАЕТ МЕНЯ, С ОДНОЙ СТОРОНЫ, В ТОМ, ЧТО Я РАССМАТРИВАЮ ПОЛИТИЧЕСКУЮ ЭКОНОМИЮ МЕТАФИЗИЧЕСКИ..."},
		[]string{"язык программирования - golang"},
		[]string{"-- А в каком возрасте бывает расцвет сил? \n-- В любом! -- ответил KarlssОn с довольной улыбкой."},

		[]string{"Я"},
		[]string{"нет", "да"},
		[]string{"Как-то", "как-то"},
		[]string{"Can't", "Саn't"}, // мixing letters

		[]string{"ПОДУМАЛ ЕЖИК", "ГЛУБОКО ВЗДОХНУЛ"},
		[]string{"шуршала камышами"},
		[]string{"По-прежнему темно✨"},

		[]string{"ПРЕДЕЛЫ AB", "ПРОДЕЛКИ KARLSSОN"},
		[]string{"линия а______b", " линия а______b"},
		[]string{"Дорогой KARLSSОN!", "Теперь понял?"},

		[]string{"СТОЙ! - КРИКНУЛ ЕЖИК. - СЛУШАЙ! МЕДВЕЖОНОК ЗАМЕР.", " -- ТЫ ОЧЕНЬ ЛЮБИШЬ ГУНИЛЛУ? -- СПРОСИЛА МАМА."},
		[]string{"нормы прибыли всегда происходит вследствие того, что прибавочная стоимость увеличивается относительно или абсолютно по сравнению с издержками ее производства", "т. е. с размерами всего авансированного капитала; другими словами, вследствие того, что разница между нормой прибыли и нормой прибавочной стоимости уменьшается"},
		[]string{"- А где ж он теперь, Ветер? -  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?", "- А где ж он теперь, Ветер? \n-  Летает. Ветер,  он всегда молодой. А  я, вишь, старая,  упала.  Кому нужна?"},

		[]string{"В ПЕРЕВОДЕ НА РУССКИЙ ЯЗЫК, ГЛАГОЛ CAN ЗНАЧИТ МОГУ, СООТВЕТСТВЕННО CAN'T (CAN NOT) ЗНАЧИТ НЕ МОГУ.", "ПРОФЕССОР WILHELM LEXIS ПОДНЯЛ ЭТОТ ВОПРОС, ХОТЯ И НЕ ПОЖЕЛАЛ ДАТЬ ПРЯМОГО РЕШЕНИЯ"},
		[]string{"каждое в 8 страниц in folio", "каждое в 8 страниц in fоliо"}, // мixing letters
		[]string{"В берлинском журнале «Concordia», органе союза немецких фабрикантов...", "В берлинском журнале «concordia», органе союза немецких фабрикантов..."},

		[]string{"МЕДВЕЖОНОК", "КАК", "КАК-ТО", "ИНДИВИДЫ", "🦄", "MARX", "ПРОИЗВОДЯЩИЕ", "ОПРЕДЕЛЕННОЕ", "ПРОИЗВОДСТВО", "ИНДИВИДОВ"},
		[]string{"данная", "идея", "явилась", "в", "готовом", "и", "законченном", "виде"},
		[]string{"Обществе", "Don't", "свободной", "конкуренции", "обществе", "как-то", "продолжительности", "Dоn't", "рабочего", "дня"}, // мixing letters

		[]string{"В ПЕРВУЮ", "THE CORN-LANDS", "HEY! 😅", "ПЯТНАДЦАТЬ ШТУК", "одно замечание", "CAN'T GO", "CАN'T GО"}, // мixing letters
		[]string{"два капитала", "малыш молчал", "р': р'1", "don't mind", "now would", " be incorrect", "он ка-ак...", "р':\tр'1"},
		[]string{"If you've...", "величины стоимости", "наш Робинзон", "?14>2*17 ()(((!", "А. Смит", "меновая стоимость", "потребительная стоимость"},

		[]string{"НУ! MAX!", "RED ШАПОЧКА", "НАШ ILLUSTRE", " ТОВАРА [KOSTPREIS]", "ОПОСРЕДСТВОВАННОГО (CIRCUITOUS)"},
		[]string{"обеспечивали («supplied»)", "«авансирования» – «avance»", "определяет implicite"},
		[]string{"Малыш и Karlsson"},

		[]string{"ВИДАЛ  МИНДАЛ! -- ВОСКЛИКНУЛ ОН ХВАСТЛИВО.", "ДА КАК ТЫ НА НЕГО ВЗОБРАЛСЯ?", "ВОЗМОЖНО, ДАЛЕЕ, ЧТО В САМОЙ ИНДИИ ПРЯЖА ОПЯТЬ-ТАКИ ПРОДАЕТСЯ В КРЕДИТ."},
		[]string{"мама почему-то ужасно испугалась и вызвала пожарников", " ", "придется  проводить много-много  часов  с  глазу  на  глаз с домомучительницей", "as hadn't checked (or had not checked) is the past perfect tense", "", "мама почему-то  ужасно испугалась и вызвала пожарников", "днем пить сок и грызть  пряники,  конечно, если  они  есть"},
		[]string{"На  другой  день  мама  уехала к бабушке. Провожая ее, все плакали, а Малыш больше всех.", "Мама вздохнула:\n-- Еще неизвестно, сможем ли мы найти домработницу.", "Can I watch downloads when I'm offline or outside the UK?", "Постарайся быть молодцом... ради меня!  И, пожалуйста, не зови ее домомучительницей.", "Малыш  подумал  и вынужден был признать, что Карлсон прав. \"Низводить\" и в самом деле звучало куда более смешно."},

		[]string{"ВОТ ЧЕМ ДОПОЛНЯЕТСЯ ЭТО PERPETUUM MOBILE БОГАТСТВА", "НА СВОИ ДЕНЬГИ ВОЗМЕЩАЕТ IN NATURA ТОЛЬКО ОБОРОТНУЮ ЧАСТЬ СВОЕГО ПОСТОЯННОГО КАПИТАЛА", "НО НЕ ВОЗОБНОВЛЯЕТ СВОЙ ОСНОВНОЙ КАПИТАЛ IN NATURA"},
		[]string{"в которых мысли записывались in statu nascendi", "но с точки зрения данного капиталиста c'est un fait", "общественный разум всегда заявляет о себе только post festum", "которые получаются при обработке льна в небольших водяных льночесальнях (scutch mills)...", "но с точки зрения данного капиталиста c'est un fait\t"},
		[]string{"отчет Редгрейва в «Reports of Insp. of Fact., October 1852», p. 58–59", "Оно начинается post festum [задним числом], т. е. исходит из готовых результатов процесса развития.", "...он определяет как основной капитал «Instruments of Trade»"},
	}

	for i, data := range stringListTests {
		list := NewStringList(data)
		actual := list.Unique()
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot get list unique:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}